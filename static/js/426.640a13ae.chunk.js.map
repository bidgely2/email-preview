{"version":3,"file":"static/js/426.640a13ae.chunk.js","mappings":"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","sources":["webpack://app/./src/features/eventManagement/eventsContainer/EventsContainer.module.scss?a515","webpack://app/./src/features/eventManagement/eventCard/EventCard.module.scss?2e2c","framework/utility/CountDownTimer.ts","webpack://app/./src/features/eventManagement/eventDeleteDialog/EventDeleteDialog.module.scss?89f7","features/eventManagement/eventDeleteDialog/EventDeleteDialog.tsx","features/eventManagement/eventCard/EventCard.tsx","webpack://app/./src/features/eventManagement/eventsDataError/EventsDataError.module.scss?089d","assets/img/no_data.svg","features/eventManagement/eventsDataError/EventsDataError.tsx","features/eventManagement/eventsContainer/EventsContainer.tsx","features/eventManagement/eventTypeFilter/EventTypeFilter.tsx","webpack://app/./src/features/eventManagement/activeEventsContainer/ActiveEventsContainer.module.scss?c760","features/eventManagement/activeEventsContainer/ActiveEventsContainer.tsx","webpack://app/./src/features/eventManagement/pastEventsContainer/PastEventsContainer.module.scss?339c","features/eventManagement/pastEventsContainer/TablePaginationActions.tsx","features/eventManagement/eventDetailDialog/EventDetailDialog.tsx","features/eventManagement/pastEventsContainer/PastEventsContainer.tsx","webpack://app/./src/features/eventManagement/dashboard/EventsManagement/EventManagementDashboard.module.scss?a5c9","features/eventManagement/dashboard/EventsManagement/EventManagementDashboard.tsx","webpack://app/./src/features/eventManagement/dashboard/UserManagement/UserManagement.module.scss?97fb","types/translations/UserManagementStrings.ts","features/eventManagement/dashboard/UserManagement/UserManagementCard.tsx","features/eventManagement/dashboard/UserManagement/UserManagement.tsx","features/eventManagement/dashboard/EventManagementDashboardContainer.tsx","features/eventManagement/index.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"root\":\"EventsContainer_root__bwSNr\",\"contentHeader\":\"EventsContainer_contentHeader__bAbfg\",\"viewEvents\":\"EventsContainer_viewEvents__V7oIK\",\"eventCount\":\"EventsContainer_eventCount__thBf5\",\"loadingCont\":\"EventsContainer_loadingCont__1pIYu\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"EventCard_root__iEVXE\",\"cardHeader\":\"EventCard_cardHeader__gUpES\",\"menuItem\":\"EventCard_menuItem__tphwB\",\"dateContainer\":\"EventCard_dateContainer__CX02Y\",\"date\":\"EventCard_date__3-Mil\",\"datePlaceholderCont\":\"EventCard_datePlaceholderCont__SqKm7\",\"eventStart\":\"EventCard_eventStart__cLs9j\",\"commHeader\":\"EventCard_commHeader__X6NrY\",\"alertStatus\":\"EventCard_alertStatus__VDQHG\"};","import { RunContextApp } from \"framework/RCApp\"\n\nexport interface CountDownTimerTick {\n  days    : number\n  hours   : number\n  minutes : number\n  seconds : number\n  durStr  : string\n}\n\nexport class CountDownTimer {\n\n  private timeRemaining : number = 0\n\n  constructor(private rc : RunContextApp, \n              private onTickCb : (value : CountDownTimerTick, complete : boolean) => void) {\n  }\n\n  init(till : number) {\n\n    this.timeRemaining = till - new Date().getTime()\n    this.timeRemaining <= 0 ? this.complete() : this.start()\n  }\n\n  start() {\n\n    this.onTick()\n\n    const intervalId = setInterval(() => {\n      // update the timer  \n      this.timeRemaining -= 1000\n\n      if (this.timeRemaining < 0) {\n          // call the callback\n          this.complete()\n          // clear the interval if expired\n          clearInterval(intervalId)\n      } else {\n        this.onTick()\n    }\n\n    }, 1000)\n  }\n\n  complete() {\n    this.onTickCb(this.getTime(), true)\n  }\n\n  onTick() {\n    this.onTickCb(this.getTime(), false)\n  }\n\n  getTime() {\n\n    return this.rc.dateUtils.getDurationObject(this.timeRemaining)\n  }\n\n}","// extracted by mini-css-extract-plugin\nexport default {\"loadingCont\":\"EventDeleteDialog_loadingCont__4n3mJ\",\"footerCont\":\"EventDeleteDialog_footerCont__T0sZ8\",\"btnCont\":\"EventDeleteDialog_btnCont__DHZjE\"};","import { Typography, \n         TextField, \n         DialogContent,\n         CircularProgress,\n         styled\n       }                          from \"@mui/material\"\nimport { EventManagementAPI }     from \"apis/eventManagementAPI\"\nimport {  \n         BglDialog, \n         BglDialogActions, \n         BglDialogTitle \n       }                          from \"components/dialog/BglDialogStyles\"\nimport { useGlobalConfig }        from \"context/GlobalContext\"\nimport { useState }               from \"react\"\nimport { DeleteEventAPI, \n         ScheduledEvent \n       }                          from \"types\"\nimport styles                     from './EventDeleteDialog.module.scss'\nimport CheckCircleOutlineIcon     from '@mui/icons-material/CheckCircleOutline'\nimport { EVENTS }                 from \"framework/events/EventSystem\"\nimport { EVENT_MANAGEMENT_STRINGS } from \"types/translations/EventManagementStrings\"\nimport { DISPLAY_MODE, EventCard } from \"../eventCard/EventCard\"\nimport { BglCloseButton, BglPrimaryButton } from \"components/button/BglButtons\"\n\nconst DarkerDisabledTextField = styled(TextField)(( {theme} ) => ({\n  \"& .MuiInputBase-input.Mui-disabled\": {\n    color: \"rgba(0, 0, 0, 0.6)\",\n    WebkitTextFillColor: \"unset\",\n  }\n}))\n\nexport interface EventDeleteDialogProps {\n  open            : boolean\n  handleClose     : () => void\n  scheduledEvent  : ScheduledEvent\n}\n\nexport const EventDeleteDialog = (props : EventDeleteDialogProps) => {\n\n  const { rc } = useGlobalConfig()\n\n  const { translations } = rc;\n  const [{ loading, data, error }, \n      setApiState] = useState<any>({ loading : false, data : null, error : null })\n\n  const handleDelete = async () => {\n\n    setApiState({ loading : true, error : null, data : null })\n\n    const params : DeleteEventAPI.params = {\n      pilotId : rc.session.getPilotId(),\n      eventId : props.scheduledEvent.eventId,\n      campaignType : props.scheduledEvent.eventType\n    }\n    rc.analytics.trackEvent(\"DELETE_EVENT_CONFIRM_CLICKED\", {eventId : props.scheduledEvent.eventId})\n    const resp = await EventManagementAPI.deleteEvent(rc, params)    \n    setApiState({ loading : false, error : resp.error, data : resp.data })\n\n    if (resp.data) {\n      setTimeout(() => {\n        rc.events.broadcast(EVENTS.RELOAD_SCHEDULED_EVENTS)        \n      }, 2000)\n    }\n  }\n\n  return (\n    <BglDialog \n      onClose={props.handleClose}\n      aria-labelledby=\"customized-dialog-title\"\n      open={props.open}>\n\n      <BglDialogTitle \n        title={translations.getTranslation(EVENT_MANAGEMENT_STRINGS.POPUP.MESSAGE.CONFIRM_DELETE)}\n        onClose={props.handleClose} />\n\n      <DialogContent>\n  \n        <EventCard\n          mode={DISPLAY_MODE.DIALOG}\n          scheduledEvent={props.scheduledEvent}/>\n\n      </DialogContent>\n\n      <BglDialogActions>\n\n        <div className={styles.footerCont}>\n          { // Loading view\n            loading ? \n            <div className={styles.loadingCont}>\n              <CircularProgress size={25} sx={{ marginRight: '10px' }}/>\n              <Typography>{translations.getTranslation(EVENT_MANAGEMENT_STRINGS.POPUP.MESSAGE.DELETING)}</Typography>\n            </div> :\n            <>\n            { // Error view\n              error ?\n              <>\n                <Typography sx={{ marginBottom: '20px'}} color=\"error\">{error.message}</Typography>\n                <div className={styles.btnCont}>\n                  <BglCloseButton sx={{ minWidth: '180px' }}\n                    onClick={props.handleClose}>\n                    {translations.getTranslation(EVENT_MANAGEMENT_STRINGS.POPUP.BTN.CANCEL)}\n                  </BglCloseButton>\n\n                  <BglPrimaryButton sx={{ minWidth: '180px' }} \n                    type=\"submit\"> \n                    {translations.getTranslation(EVENT_MANAGEMENT_STRINGS.POPUP.BTN.TRY_AGAIN)}\n                  </BglPrimaryButton>\n                </div>\n              </> : \n\n              // Success view\n              data ?\n              <>\n                <div className={styles.loadingCont}>\n                  <CheckCircleOutlineIcon color=\"success\" sx={{ marginRight: '10px', marginBottom: '20px' }}/>\n                  <Typography color=\"success\">\n                    {translations.getTranslation(EVENT_MANAGEMENT_STRINGS.POPUP.MESSAGE.DELETED)}\n                  </Typography>\n                </div>\n              </> : \n\n              // Default view\n              <div className={styles.btnCont}>\n                <BglCloseButton sx={{ minWidth: '180px' }} \n                  onClick={handleDelete}>\n                  {translations.getTranslation(EVENT_MANAGEMENT_STRINGS.POPUP.BTN.DELETE)}\n                </BglCloseButton>\n\n                <BglPrimaryButton sx={{ minWidth: '180px' }}\n                  onClick={props.handleClose}> \n                  {translations.getTranslation(EVENT_MANAGEMENT_STRINGS.POPUP.BTN.CANCEL)}\n                </BglPrimaryButton>\n              </div>\n            }\n            </>\n          }\n        </div>\n                \n      </BglDialogActions>\n      \n\n        \n    </BglDialog>\n  )\n}","import React, { useEffect, useState }                          from \"react\"\nimport { Accordion, \n         AccordionDetails, \n         AccordionSummary, \n         Card, \n         IconButton, \n         Menu, \n         MenuItem, \n         styled, \n         Table, \n         TableBody, \n         TableCell, \n         TableContainer, \n         TableHead, \n         TableRow, \n         Typography, \n         useTheme\n       }                              from \"@mui/material\"\nimport { ScheduledEvent, \n         UnionKeyToValue \n       }                              from \"types\"\nimport styles                         from './EventCard.module.scss'\nimport MoreIcon                       from '@mui/icons-material/MoreVert'\nimport CreateIcon                     from '@mui/icons-material/Create'\nimport AlarmIcon                      from '@mui/icons-material/Alarm'\nimport ExpandMoreIcon                 from '@mui/icons-material/ExpandMore'\nimport EmailIcon                      from '@mui/icons-material/Email'\nimport DeleteIcon                     from '@mui/icons-material/Delete'\nimport QueueIcon                      from '@mui/icons-material/Queue'\nimport { useGlobalConfig }            from \"context/GlobalContext\"\nimport { EventEditDialog, \n         MODE \n       }                              from \"../editEventDialog/EventEditDialog\"\nimport { CountDownTimer, \n         CountDownTimerTick \n       }                              from \"framework/utility/CountDownTimer\"\nimport { EventDeleteDialog }          from \"../eventDeleteDialog/EventDeleteDialog\"\nimport { EVENT_MANAGEMENT_STRINGS } from \"types/translations/EventManagementStrings\"\nimport { isEventTypeEV } from \"helpers/helper\"\n\nconst EDIT_CUTOFF = 30 * 60 * 1000\n\nconst BglAccordian = styled(Accordion)(( {theme} ) => ({\n\n  background: theme.bglPalette.data_colors.eventCardCommunication_bg,\n  padding: 0,\n  margin: 0,\n  marginTop: '10px',\n\n  '.MuiAccordionSummary-root' : {\n    padding: '0 10px'\n  },\n\n  '&:before': {\n    display : 'none'\n  },\n\n}))\n\nconst BglHeaderCell = styled(TableCell)(( {theme}) => ({\n  border: 'none'\n}))\n\n\nconst BglTableCell = styled(TableCell)(( {theme}) => ({\n  paddingTop: '10px',\n  border: 'none',\n  whiteSpace: 'normal',\n  wordWrap: 'break-word'\n}))\n\nexport type DISPLAY_MODE = 'CARD' | 'DIALOG'\nexport const DISPLAY_MODE : UnionKeyToValue<DISPLAY_MODE> = {\n  CARD    : 'CARD',\n  DIALOG  : 'DIALOG'\n}\n\nexport interface EventCardProps {\n  mode : DISPLAY_MODE\n  scheduledEvent : ScheduledEvent\n}\n\nexport const EventCard = (props : EventCardProps) => {\n\n  const { rc } = useGlobalConfig()\n  const scheduledEvent = props.scheduledEvent\n  const [moreAnchorEl, setMoreAnchorEl] = React.useState<null | HTMLElement>(null)\n  \n  const [openSE, setOpenSE] = React.useState(false)\n  const [seProps, setSEProps] = useState({})\n\n  const [openDE, setOpenDE] = React.useState(false)\n  \n  const [countDownTime, setCountDownTime] = React.useState('')\n  \n  const isMenuOpen = Boolean(moreAnchorEl)\n\n  const { translations , config} = rc;\n\n  const pilotTimeZone = config.getConfig('EVENT_MANAGEMENT.PILOT_TIMEZONE') || Intl.DateTimeFormat().resolvedOptions().timeZone;\n  //Get time difference between pilot and local timezone.\n  const timeDiff = rc.dateUtils.getTimeDifference( Intl.DateTimeFormat().resolvedOptions().timeZone,pilotTimeZone) as number;\n\n  const handleMobileMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\n    setMoreAnchorEl(event.currentTarget)\n  }\n\n  const handleMenuClose = () => {\n    setMoreAnchorEl(null)\n  }\n\n  const handleEditEvent = () => {\n    rc.analytics.trackEvent('EDIT_EVENT_CLICKED',{});\n    setMoreAnchorEl(null)\n    setOpenSE(true)\n  }\n\n  const handleSEClose = (event : any, reason ?: string) => {\n    if(event){\n      rc.analytics.trackEvent(event, {reason});\n    }\n    if (reason && reason === 'backdropClick') return\n    setOpenSE(false)\n  }\n\n  const handleDuplicateEvent = () => {\n    setMoreAnchorEl(null)\n    \n    const sd = new Date(props.scheduledEvent.startTimeEpoch * 1000)\n    const ed = new Date(props.scheduledEvent.endTimeEpoch * 1000)\n\n    let sInFuture = 1, eInFuture = 1\n    if (rc.dateUtils.getTimeOfDayMillis(sd) > rc.dateUtils.getTimeOfDayMillis(ed)) {\n      eInFuture++\n    } \n    const seProps = {\n      mode : MODE.ADD, \n      eventType : props.scheduledEvent.eventType,\n      startDate : rc.dateUtils.getSameTimeForFutureDay(sd, sInFuture),\n      endDate : rc.dateUtils.getSameTimeForFutureDay(ed, eInFuture),\n      scheduledEvent: null \n    }\n    setSEProps(seProps)\n    rc.analytics.trackEvent('DUPLICATE_EVENT_CLICKED', \n    { \n      ...seProps, \n      eventName : scheduledEvent.eventName\n    });\n    setOpenSE(true)\n  }\n\n  const handleDeleteEvent = () => {\n    rc.analytics.trackEvent(\"DELETE_EVENT_MENU_ITEM_CLICKED\", { \n      eventId : props.scheduledEvent.eventId,\n      eventName : props.scheduledEvent.eventName\n    })\n    setMoreAnchorEl(null)\n    setOpenDE(true)\n  }\n\n  const handleDEClose = () => {\n    setOpenDE(false)\n  }\n\n  const alertList = !isEventTypeEV(scheduledEvent.eventType) ? scheduledEvent.communications[0].alertList : []\n\n  const canEdit =\n    (alertList.length > 0 &&\n      alertList[0].dateEpoch >= (new Date().getTime() + EDIT_CUTOFF) / 1000) ||\n    isEventTypeEV(scheduledEvent.eventType)\n\n  const canDelete = scheduledEvent.eventStatus === ScheduledEvent.EventStatus.SCHEDULED && canEdit\n\n  useEffect(() => {\n\n    const toTime = scheduledEvent.eventStatus === ScheduledEvent.EventStatus.ONGOING \n        ? scheduledEvent.endTimeEpoch * 1000 : scheduledEvent.startTimeEpoch * 1000\n\n    const timer = new CountDownTimer(rc, (value : CountDownTimerTick, complete : boolean) => {      \n      setCountDownTime(value.durStr)\n    })\n    timer.init(toTime)\n\n  }, [])\n\n  const theme = useTheme();\n  const menuId = 'event-menu'\n  const renderMenu = (\n    <Menu\n      sx={{ marginLeft: '-15px' }}\n      anchorEl={moreAnchorEl}\n      anchorOrigin={{\n        vertical: 'bottom',\n        horizontal: 'right',\n      }}\n      MenuListProps={{\n        style: {padding : '0px'}\n      }}\n      id={menuId}\n      keepMounted\n      transformOrigin={{\n        vertical: 'top',\n        horizontal: 'right',\n      }}\n      open={isMenuOpen}\n      onClose={handleMenuClose}\n    >\n      { \n      <MenuItem className={styles.menuItem} onClick={handleEditEvent}>\n        <IconButton\n          size=\"large\"\n          aria-label=\"account of current user\"\n          aria-controls=\"primary-search-account-menu\"\n          aria-haspopup=\"true\"\n          color=\"primary\"\n        >\n          <CreateIcon />\n        </IconButton>\n        <Typography variant=\"bglBody2\" sx={{ paddingRight: '10px'}}>\n          {translations.getTranslation(EVENT_MANAGEMENT_STRINGS.ACTIONS.EDIT)}\n        </Typography>\n      </MenuItem>\n      }\n      <MenuItem className={styles.menuItem} onClick={handleDuplicateEvent}>\n        <IconButton\n          size=\"large\"\n          aria-label=\"account of current user\"\n          aria-controls=\"primary-search-account-menu\"\n          aria-haspopup=\"true\"\n          color=\"primary\"\n        >\n          <QueueIcon />\n        </IconButton>\n        <Typography variant=\"bglBody2\" sx={{ paddingRight: '10px'}}>\n          {translations.getTranslation(EVENT_MANAGEMENT_STRINGS.ACTIONS.DUPLICATE)}\n        </Typography>\n      </MenuItem>\n      { canDelete &&\n      <MenuItem className={styles.menuItem} onClick={handleDeleteEvent}>\n        <IconButton\n          size=\"large\"\n          aria-label=\"account of current user\"\n          aria-controls=\"primary-search-account-menu\"\n          aria-haspopup=\"true\"\n          color=\"primary\"\n        >\n          <DeleteIcon />\n        </IconButton>\n        <Typography variant=\"bglBody2\" sx={{ paddingRight: '10px'}}>\n          {translations.getTranslation(EVENT_MANAGEMENT_STRINGS.ACTIONS.DELETE)}\n        </Typography>\n      </MenuItem>}\n    </Menu>\n  )\n\n  return (\n    <Card variant=\"outlined\" className={styles.root}>\n      <div className={styles.cardHeader}>\n        <Typography \n          noWrap\n          component=\"div\"\n          variant=\"bglSubtitle4\"\n          >\n            {scheduledEvent.eventName}\n        </Typography>\n        \n        { props.mode === DISPLAY_MODE.CARD &&\n        <IconButton\n          size=\"large\"\n          aria-label=\"show more\"\n          aria-controls={menuId}\n          aria-haspopup=\"true\"\n          onClick={handleMobileMenuOpen}\n          color=\"primary\"\n          sx={{ marginRight : '-15px' }}\n        >\n          <MoreIcon />\n        </IconButton>\n        }\n          \n      </div>\n      {renderMenu}\n\n      <div className={styles.dateContainer}\n        style={{border : `1px solid ${theme.bglPalette.data_colors.pastEventTable_border}`}}>\n\n        <div className={`${styles.date}`} \n        style={{borderRight : `1px solid ${theme.bglPalette.data_colors.pastEventTable_border}`}}>\n          <Typography\n            component=\"div\"\n            variant=\"bglCaption1\" color={theme.palette.text.secondary}>\n            {translations.getTranslation(EVENT_MANAGEMENT_STRINGS.DATE.START)}\n          </Typography>\n          <Typography\n            component=\"div\"\n            variant=\"bglBody4\">\n            {rc.dateUtils.formatDate(rc.dateUtils.addMinutesToDate(new Date(scheduledEvent.startTimeEpoch * 1000),timeDiff), 'MMM dd, yyyy hh:mm a')}\n          </Typography>\n        </div>\n\n        <div className={styles.date}>\n          <Typography component=\"div\"\n            variant=\"bglCaption1\" color={theme.palette.text.secondary}>\n            {translations.getTranslation(EVENT_MANAGEMENT_STRINGS.DATE.END)}\n          </Typography>\n          <Typography component=\"div\"\n            variant=\"bglBody4\">\n            {rc.dateUtils.formatDate(rc.dateUtils.addMinutesToDate(new Date(scheduledEvent.endTimeEpoch * 1000),timeDiff), 'MMM dd, yyyy hh:mm a')}\n          </Typography>\n        </div>\n\n      </div>\n\n      { props.mode === DISPLAY_MODE.CARD && \n        <Typography className={styles.eventStart} variant=\"bglBody2\" sx={{ marginTop: '15px'}}>\n          <AlarmIcon color=\"primary\" sx={{ marginRight: '5px'}}/> \n          { scheduledEvent.eventStatus === ScheduledEvent.EventStatus.ONGOING \n            ? translations.getTranslation(EVENT_MANAGEMENT_STRINGS.EVENT_ENDS_IN) : \n            translations.getTranslation(EVENT_MANAGEMENT_STRINGS.EVENT_STARTS_IN) }\n          <Typography variant=\"bglSubtitle3\" sx={{marginLeft: '5px'}}>\n             {countDownTime}\n          </Typography>\n        </Typography>\n      }\n\n      { !isEventTypeEV(scheduledEvent.eventType) &&\n       <BglAccordian defaultExpanded={props.mode === DISPLAY_MODE.DIALOG} disableGutters elevation={0}>\n        <AccordionSummary className={styles.commSummary} expandIcon={<ExpandMoreIcon />}>\n          <Typography className={styles.commHeader} variant=\"bglCaption1\" color={theme.palette.text.secondary}>\n            <EmailIcon sx={{ height: '20px', marginRight: '5px' }} /> \n            {translations.getTranslation(EVENT_MANAGEMENT_STRINGS.COMMUNICATIONS.TITLE)}\n          </Typography>\n        </AccordionSummary>\n        <AccordionDetails sx={{ padding : 0}}>\n          \n          <TableContainer>\n            <Table size=\"small\">\n              <TableHead>\n                <TableRow>\n                  <BglHeaderCell>\n                    <Typography variant=\"bglCaption1\" color={theme.palette.text.secondary}>\n                      {translations.getTranslation(EVENT_MANAGEMENT_STRINGS.COMMUNICATIONS.FIELDS.EMAIL)}\n                    </Typography>\n                  </BglHeaderCell>\n                  <BglHeaderCell>\n                    <Typography variant=\"bglCaption1\" color={theme.palette.text.secondary}>\n                      {translations.getTranslation(EVENT_MANAGEMENT_STRINGS.COMMUNICATIONS.FIELDS.DATE)}\n                    </Typography>\n                  </BglHeaderCell>\n                  <BglHeaderCell>\n                    <Typography variant=\"bglCaption1\" color={theme.palette.text.secondary}>\n                      {translations.getTranslation(EVENT_MANAGEMENT_STRINGS.COMMUNICATIONS.FIELDS.STATUS)}\n                    </Typography>\n                  </BglHeaderCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {scheduledEvent.communications[0].alertList.map(((alert, index) => (\n                  <TableRow key={index}>\n                    <BglTableCell>\n                    <Typography variant=\"bglCaption1\">{translations.getTranslation(alert.alertType)}</Typography>\n                    </BglTableCell>\n                    <BglTableCell>\n                      <Typography variant=\"bglCaption1\">{rc.dateUtils.formatDate(rc.dateUtils.addMinutesToDate(new Date(alert.dateEpoch * 1000),timeDiff), 'MMM dd, yyyy hh:mm a')}</Typography>\n                    </BglTableCell>\n                    <BglTableCell>\n                      <span className={`${styles.alertStatus}`} \n                      style={{backgroundColor : `${theme.bglPalette.data_colors[`alertStatus_${alert.status.toLowerCase()}`]}`}}>\n                        <Typography variant=\"bglCaption1\" color={theme.palette.primary.contrastText}>\n                          {translations.getTranslation(EVENT_MANAGEMENT_STRINGS.EVENT_STATUS[alert.status]) }\n                        </Typography>\n                      </span>\n                    </BglTableCell>\n                  </TableRow>\n                )))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n\n\n        </AccordionDetails>\n      </BglAccordian>}\n\n      { openSE ? \n        <EventEditDialog\n          scheduledEvent={scheduledEvent}\n          mode={MODE.EDIT}\n          open={openSE}\n          handleClose={handleSEClose}\n          {...seProps}/> : <></>\n      }\n\n      { openDE ? \n        <EventDeleteDialog\n          scheduledEvent={scheduledEvent}\n          open={openDE}\n          handleClose={handleDEClose}/> : <></>\n      }\n\n    </Card>\n  )\n}","// extracted by mini-css-extract-plugin\nexport default {\"errorCont\":\"EventsDataError_errorCont__5rdwL\",\"errorHeading\":\"EventsDataError_errorHeading__xgqJV\",\"errorDesc\":\"EventsDataError_errorDesc__Bm2-c\",\"errorIcon\":\"EventsDataError_errorIcon__kMZEA\"};","var _path, _circle, _circle2, _circle3, _circle4, _path2, _circle5, _circle6, _circle7, _circle8, _circle9, _circle10, _circle11, _line, _defs;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgNoData(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 287,\n    height: 100,\n    viewBox: \"0 0 287 100\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M6 19H36L66 93.5H94\",\n    stroke: \"#8DC2F2\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _circle || (_circle = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 6.5,\n    cy: 18.5,\n    r: 5.25,\n    fill: \"white\",\n    stroke: \"#8DC2F2\",\n    strokeWidth: 1.5\n  })), _circle2 || (_circle2 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 35.5,\n    cy: 18.5,\n    r: 5.25,\n    fill: \"white\",\n    stroke: \"#8DC2F2\",\n    strokeWidth: 1.5\n  })), _circle3 || (_circle3 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 65.5,\n    cy: 93.5,\n    r: 5.25,\n    fill: \"white\",\n    stroke: \"#8DC2F2\",\n    strokeWidth: 1.5\n  })), _circle4 || (_circle4 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 93.5,\n    cy: 93.5,\n    r: 5.25,\n    fill: \"white\",\n    stroke: \"#8DC2F2\",\n    strokeWidth: 1.5\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M281 19H251L221 93.5H193\",\n    stroke: \"#8DC2F2\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _circle5 || (_circle5 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 4.5,\n    cy: 4.5,\n    r: 5.25,\n    transform: \"matrix(-1 0 0 1 285 14)\",\n    fill: \"white\",\n    stroke: \"#8DC2F2\",\n    strokeWidth: 1.5\n  })), _circle6 || (_circle6 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 4.5,\n    cy: 4.5,\n    r: 5.25,\n    transform: \"matrix(-1 0 0 1 256 14)\",\n    fill: \"white\",\n    stroke: \"#8DC2F2\",\n    strokeWidth: 1.5\n  })), _circle7 || (_circle7 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 4.5,\n    cy: 4.5,\n    r: 5.25,\n    transform: \"matrix(-1 0 0 1 226 89)\",\n    fill: \"white\",\n    stroke: \"#8DC2F2\",\n    strokeWidth: 1.5\n  })), _circle8 || (_circle8 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 4.5,\n    cy: 4.5,\n    r: 5.25,\n    transform: \"matrix(-1 0 0 1 198 89)\",\n    fill: \"white\",\n    stroke: \"#8DC2F2\",\n    strokeWidth: 1.5\n  })), _circle9 || (_circle9 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 141,\n    cy: 50,\n    r: 49,\n    fill: \"url(#paint0_linear_10590_98048)\",\n    fillOpacity: 0.3,\n    stroke: \"#8DC2F2\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _circle10 || (_circle10 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 124,\n    cy: 39,\n    r: 4,\n    fill: \"#8DC2F2\"\n  })), _circle11 || (_circle11 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 149,\n    cy: 33,\n    r: 4,\n    fill: \"#8DC2F2\"\n  })), _line || (_line = /*#__PURE__*/React.createElement(\"line\", {\n    x1: 131.058,\n    y1: 57.1616,\n    x2: 154.162,\n    y2: 50.9415,\n    stroke: \"#8DC2F2\",\n    strokeWidth: 3,\n    strokeLinecap: \"round\"\n  })), _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint0_linear_10590_98048\",\n    x1: 132.5,\n    y1: 2,\n    x2: 141,\n    y2: 98,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#189EFF\",\n    stopOpacity: 0.22\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    stopColor: \"#18C8FF\",\n    stopOpacity: 0\n  })))));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgNoData);\nexport default __webpack_public_path__ + \"static/media/no_data.d26011d2d9ae2d1526ea2c2ad4f9cb94.svg\";\nexport { ForwardRef as ReactComponent };","import { Typography, \n         useTheme\n       }                                from '@mui/material'\nimport CancelOutlinedIcon               from '@mui/icons-material/CancelOutlined'\nimport styles                           from './EventsDataError.module.scss'\nimport NoDataImg                        from '@/assets/img/no_data.svg'\nimport { BglPrimaryButton } from 'components/button/BglButtons'\n\nexport interface EventsDataErrorProps {\n  noData ?: boolean\n  title : string\n  subTitle : string\n  cta ?: {\n    title : string\n    callback : () => void\n  }\n}\n\nexport const EventsDataError = (props : EventsDataErrorProps) => {\n  const theme = useTheme();\n  return (\n    <div className={styles.errorCont}>\n      { props.noData \n        ? <img src={NoDataImg} alt=\"No events\"/>\n        : <CancelOutlinedIcon  className={styles.errorIcon} color=\"error\"/>\n      }\n      <Typography className={styles.errorHeading} variant=\"bglSubtitle1\">{props.title}</Typography>\n      <Typography className={styles.errorDesc} variant=\"bglBody2\" color={theme.palette.text.secondary}>\n        {props.subTitle}\n      </Typography>\n     { props.cta && <BglPrimaryButton \n        onClick={props.cta.callback} \n        sx={{ marginTop: '20px'}}>\n        {props.cta.title}\n      </BglPrimaryButton>}\n    </div>\n  )\n}","import { Accordion, \n         AccordionDetails, \n         AccordionSummary, \n         Grid, \n         styled, \n         Theme, \n         Typography, \n         useTheme\n       }                                from \"@mui/material\"\nimport { EventManagementAPI }           from \"apis/eventManagementAPI\"\nimport { useGlobalConfig }              from \"context/GlobalContext\"\nimport { GetEventsAPI, \n         ScheduledEvent \n       }                                from \"types/eventManagement/EventManagementInterface\"\nimport { ExpandMore }                   from \"@mui/icons-material\"\nimport styles                           from './EventsContainer.module.scss'\nimport { DISPLAY_MODE, EventCard }                    from \"../eventCard/EventCard\"\nimport { useRequestApiData }            from \"hooks\"\nimport { EventsDataError }              from \"../eventsDataError/EventsDataError\"\nimport { useEffect, useState }          from \"react\"\nimport { BglLoading }                   from \"components/loading/BglLoading\"\nimport { EVENTS }                       from \"framework/events/EventSystem\"\nimport { EVENT_MANAGEMENT_STRINGS }     from \"types/translations/EventManagementStrings\"\n\nconst BglAccordian = styled(Accordion)(( {theme} ) => ({\n\n  width: '100%',\n  background: 'none',\n  padding: 0,\n  margin: 0,\n  \".MuiAccordionSummary-root\": {\n    padding: \"0 10px\",\n  },\n\n  \"&:before\": {\n    display: \"none\",\n  },\n}));\n\nconst BglAccordianDetails = styled(AccordionDetails)(({ theme }) => ({\n  \"&.MuiAccordionDetails-root\": {\n    minHeight: \"300px\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n}));\n\nexport interface EventsContainerProps {\n  eventStatus: ScheduledEvent.EventStatus;\n  eventType: ScheduledEvent.EventType;\n}\n\nexport const EventsContainer = (props: EventsContainerProps) => {\n  const { rc } = useGlobalConfig();\n  const { translations } = rc;\n  \n  const { eventStatus, eventType } = props;\n  let [reload, setReload] = useState(0);\n  const [expanded, setExpanded ] = useState(eventStatus === ScheduledEvent.EventStatus.ONGOING)\n  const [ manualExpanded, setManualExpanded] = useState(false)\n\n  const params: GetEventsAPI.params = {\n    pilotId: rc.session.getPilotId(),\n    eventType,\n    eventStatus,\n    timezoneOffsetMins : rc.dateUtils.getTimezoneOffset()\n  };\n\n  const theme : Theme = useTheme();\n\n  useEffect(() => {\n    if (eventStatus === ScheduledEvent.EventStatus.SCHEDULED) {\n      rc.events.subscribe(EVENTS.RELOAD_SCHEDULED_EVENTS, () => {\n        setReload(++reload);\n      });\n    }\n\n    if (eventStatus === ScheduledEvent.EventStatus.ONGOING) {\n      rc.events.subscribe(EVENTS.RELOAD_ONGOING_EVENTS, () => {\n        setReload(++reload);\n      });\n    }\n\n  }, [eventStatus]);\n\n  const { data, error, isLoading } = useRequestApiData<GetEventsAPI.retval>(\n    EventManagementAPI.fetchEvents,\n    rc,\n    params,\n    [reload]\n  );\n\n  useEffect(() => {\n    if (data && data.length === 0 && !manualExpanded && expanded) {\n      setExpanded(false)\n    }\n  }, [data,manualExpanded,expanded]);\n\n  const expandAccordian = (expanded : boolean) => {\n    if (!manualExpanded) setManualExpanded(true)\n    setExpanded(expanded)\n  }\n\n  return (\n    <div className={`${styles.root} ${styles[eventStatus.toLowerCase()]}`}>\n      <div className={styles.contentHeader}>\n        <BglAccordian \n          disableGutters \n          elevation={0} \n          expanded={expanded}\n          onChange={(event, expanded) => expandAccordian(expanded)}\n          sx={{backgroundColor : `${theme.bglPalette.data_colors[`${eventStatus.toLowerCase()}_bg`]}`,\n                border : `1px solid ${theme.bglPalette.data_colors[`${eventStatus.toLowerCase()}_border`]}`}}>\n          <AccordionSummary expandIcon={<ExpandMore />}>\n            <Typography\n              noWrap\n              component=\"div\"\n              sx={{ typography: { md: \"bglSubtitle3\", xs: \"body2\" }}}\n            >\n              {translations.getTranslation(\n                EVENT_MANAGEMENT_STRINGS[eventStatus]?.TITLE\n              )}{\" \"}\n              {!error ? (\n                <Typography\n                component=\"span\"\n                variant=\"bglBody1\"\n                color={theme.palette.text.secondary}>\n                  ({data?.length})\n                </Typography>\n              ) : (\n                <></>\n              )}\n            </Typography>\n          </AccordionSummary>\n          <BglAccordianDetails>\n            {isLoading ? (\n              <BglLoading className={styles.loadingCont} />\n            ) : error || data?.length === 0 ? (\n              <EventsDataError\n                noData={data?.length === 0}\n                title={\n                  error\n                    ? translations.getTranslation(\n                        EVENT_MANAGEMENT_STRINGS.ERROR.TITLE\n                      )\n                    : translations.getTranslation(\n                        EVENT_MANAGEMENT_STRINGS.NO_DATA.TITLE\n                      )\n                }\n                subTitle={\n                  error\n                    ? translations.getTranslation(\n                        EVENT_MANAGEMENT_STRINGS.ERROR.SUBTEXT\n                      )\n                    : translations.getTranslation(\n                        EVENT_MANAGEMENT_STRINGS.NO_DATA.SUBTEXT\n                      )\n                }\n                cta={\n                  error\n                    ? {\n                        title: translations.getTranslation(\n                          EVENT_MANAGEMENT_STRINGS.ERROR.RELOAD\n                        ),\n                        callback: () => setReload(++reload),\n                      }\n                    : undefined\n                }\n              />\n            ) : (\n              <Grid\n                container\n                spacing={{ xs: 1, md: 3 }}\n                columns={{ xs: 4, sm: 8, md: 12 }}\n              >\n                {data?.map((scheduledEvent, index) => (\n                  <Grid item xs={12} sm={4} md={4} key={index}>\n                    <EventCard\n                      mode={DISPLAY_MODE.CARD}\n                      scheduledEvent={scheduledEvent}\n                    />\n                  </Grid>\n                ))}\n              </Grid>\n            )}\n          </BglAccordianDetails>\n        </BglAccordian>\n      </div>\n    </div>\n  );\n};\n","import { FormControl, \n         Select, \n         InputAdornment, \n         Typography, \n         MenuItem, \n         SelectChangeEvent\n       }                        from \"@mui/material\"\nimport { useGlobalConfig } from \"context/GlobalContext\"\nimport { ScheduledEvent }        from \"types\"\nimport { EVENT_MANAGEMENT_STRINGS } from \"types/translations/EventManagementStrings\"\n\nexport interface EventTypeFilterProps {\n  eventType : ScheduledEvent.EventType\n  handleEventTypeChange : (event : SelectChangeEvent<ScheduledEvent.EventType>) => void\n}\n\nexport const EventTypeFilter = (props : EventTypeFilterProps) => {\n  const { rc } = useGlobalConfig();\n  const { translations , config } = rc;\n  const supportedEvents = JSON.parse(config.getConfig('EVENT_MANAGEMENT.SUPPORTED_CAMPAIGN_TYPES'))\n  return (\n    <FormControl>\n      <Select variant='outlined'\n        inputProps={{ sx: { padding : '10px' } }}\n        id=\"event-type-select\"\n        value={props.eventType}\n        onChange={props.handleEventTypeChange}\n        sx={{ borderRadius: '30px' }}\n        startAdornment={\n          <InputAdornment position='start'>\n            <Typography variant=\"bglCaption1\">\n              {translations.getTranslation(EVENT_MANAGEMENT_STRINGS.EVENT_TYPE_TITLE)}:\n            </Typography>\n          </InputAdornment>\n        }>\n        {supportedEvents.map((value : ScheduledEvent.EventType) => (\n          <MenuItem\n            key={value}\n            value={value}              \n          >\n            <Typography variant=\"bglBody2\">\n              {translations.getTranslation(EVENT_MANAGEMENT_STRINGS.EVENT_TYPE[value])}</Typography>\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  )\n}","// extracted by mini-css-extract-plugin\nexport default {\"filterCont\":\"ActiveEventsContainer_filterCont__-fL4Q\"};","import { SelectChangeEvent }  from \"@mui/material\"\nimport { useState }           from \"react\"\nimport { ScheduledEvent }      from \"types\"\nimport { EventsContainer }    from \"../eventsContainer/EventsContainer\"\nimport { EventTypeFilter }    from \"../eventTypeFilter/EventTypeFilter\"\nimport styles                 from './ActiveEventsContainer.module.scss' \n\nexport const ActiveEventsContainer = () => {\n\n  const [eventType, setEventType] = useState<ScheduledEvent.EventType>(ScheduledEvent.EventType.ALL)\n\n  const handleEventTypeChange = (event : SelectChangeEvent<ScheduledEvent.EventType>) => {\n    const value = event.target.value as ScheduledEvent.EventType\n    setEventType(value)\n  }\n\n  return (\n    <>\n      <div className={styles.filterCont}>\n        <EventTypeFilter \n          eventType={eventType}\n          handleEventTypeChange={handleEventTypeChange}/>\n      </div>\n      \n      <EventsContainer\n        eventStatus={ScheduledEvent.EventStatus.ONGOING}\n        eventType={eventType}/>\n\n      <EventsContainer\n        eventStatus={ScheduledEvent.EventStatus.SCHEDULED}\n        eventType={eventType}/>\n    </>\n  )\n}","// extracted by mini-css-extract-plugin\nexport default {\"filterCont\":\"PastEventsContainer_filterCont__1vKyC\",\"loadingCont\":\"PastEventsContainer_loadingCont__taHwk\",\"disclaimerCont\":\"PastEventsContainer_disclaimerCont__cRymn\",\"eventsCont\":\"PastEventsContainer_eventsCont__kAhb+\"};","import { KeyboardArrowRight, \n         KeyboardArrowLeft \n       }                              from \"@mui/icons-material\"\nimport { Box, \n         IconButton \n       }                              from \"@mui/material\"\nimport FirstPageIcon                  from '@mui/icons-material/FirstPage'\nimport LastPageIcon                   from '@mui/icons-material/LastPage'\n\nexport interface TablePaginationActionsProps {\n  count         : number\n  page          : number\n  rowsPerPage   : number\n  onPageChange  : (event: React.MouseEvent<HTMLButtonElement>, newPage: number) => void\n}\n\nexport function TablePaginationActions(props: TablePaginationActionsProps) {\n\n  const { count, page, rowsPerPage, onPageChange } = props\n\n  const handleFirstPageButtonClick = (\n    event: React.MouseEvent<HTMLButtonElement>,\n  ) => {\n    onPageChange(event, 0)\n  }\n\n  const handleBackButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    onPageChange(event, page - 1)\n  }\n\n  const handleNextButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    onPageChange(event, page + 1)\n  }\n\n  const handleLastPageButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1))\n  }\n\n  return (\n    <Box sx={{ flexShrink: 0, ml: 2.5 }}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {<FirstPageIcon />}\n      </IconButton>\n      <IconButton\n        onClick={handleBackButtonClick}\n        disabled={page === 0}\n        aria-label=\"previous page\"\n      >\n        {<KeyboardArrowLeft />}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {<KeyboardArrowRight />}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {<LastPageIcon />}\n      </IconButton>\n      \n    </Box>\n  )\n}","import { \n         DialogActions, \n         DialogContent\n     }                          from \"@mui/material\"\nimport { ScheduledEvent }       from \"types\"\nimport { DISPLAY_MODE, \n         EventCard \n       }                        from \"../eventCard/EventCard\"\nimport { BglDialog, \n         BglDialogTitle \n       }                        from \"components/dialog/BglDialogStyles\"\nimport { BglPrimaryButton }     from \"components/button/BglButtons\"\n\nexport interface EventDetailsDialogProps {\n  open            : boolean\n  scheduledEvent  : ScheduledEvent\n  handleClose     : () => void\n  onDuplicateCb   : () => void\n}\n\nexport const EventDetailsDialog = (props : EventDetailsDialogProps) => {\n\n  const handleDuplicateEvent = () => {\n    props.onDuplicateCb()\n  }\n\n  return (\n    <BglDialog \n      onClose={props.handleClose}\n      aria-labelledby=\"customized-dialog-title\"\n      open={props.open}> \n      \n      <BglDialogTitle \n        title='Event Details'\n        onClose={props.handleClose} />\n\n      <DialogContent> \n\n        <EventCard\n          mode={DISPLAY_MODE.DIALOG}\n          scheduledEvent={props.scheduledEvent}/>\n\n      </DialogContent>\n\n      <DialogActions sx={{ justifyContent: 'center', marginBottom: '20px' }}>\n        <BglPrimaryButton sx={{ minWidth: '180px' }}\n          onClick={handleDuplicateEvent}> \n          { 'Duplicate' }\n        </BglPrimaryButton>\n      </DialogActions>\n\n    </BglDialog>\n  )\n}","import { Button, \n         SelectChangeEvent, \n         styled, \n         Table, \n         TableBody, \n         TableCell, \n         TableContainer, \n         TableFooter, \n         TableHead, \n         TablePagination, \n         TableRow, \n         TextField, \n         Typography,\n         useTheme\n       }                          from '@mui/material'\nimport { useState }               from 'react'\nimport { GetEventsAPI, \n         ScheduledEvent \n       }                          from 'types'\nimport { EventTypeFilter }        from '../eventTypeFilter/EventTypeFilter'\nimport { DatePicker, \n         LocalizationProvider, \n       }                          from '@mui/x-date-pickers'\nimport { AdapterDateFns }         from '@mui/x-date-pickers/AdapterDateFns'\nimport styles                     from './PastEventsContainer.module.scss'\nimport { EventManagementAPI }     from 'apis/eventManagementAPI'\nimport { useRequestApiData }      from 'hooks'\nimport { useGlobalConfig }        from 'context/GlobalContext'\nimport { TablePaginationActions } from './TablePaginationActions'\nimport { EventsDataError }        from '../eventsDataError/EventsDataError'\nimport { BglLoading }             from 'components/loading/BglLoading'\nimport { EventDetailsDialog }     from '../eventDetailDialog/EventDetailDialog'\nimport { EventEditDialog, MODE }        from '../editEventDialog/EventEditDialog'\nimport { EVENT_MANAGEMENT_STRINGS } from 'types/translations/EventManagementStrings'\n\nconst BglDatePicker = styled(DatePicker)(({theme}) => ({\n\n  '.MuiInputBase-root': {\n    borderRadius: '30px',\n    [theme.breakpoints.down('sm')]: {\n      marginTop : '20px'\n    }\n  },\n  '.MuiIconButton-root': {\n    color: theme.palette.primary.main\n  },\n  '.MuiInputBase-input': {\n    padding : '10px 15px'\n  }\n}))\n\nconst BglTable = styled(Table)(({ theme }) => ({\n  width: 'calc(100% - 40px)',\n  margin: '0px 20px',\n  border: `1px solid ${theme.bglPalette.data_colors.pastEventTable_border}`\n}))\n\nconst BglHeaderCell = styled(TableCell)(( {theme}) => ({\n  border: 'none',\n  fontWeight: 600,\n  borderRight: `1px solid ${theme.bglPalette.data_colors.pastEventTable_border}`\n}))\n\nconst BglRowCell = styled(TableCell)(( {theme}) => ({\n  border: 'none',\n  borderRight: `1px solid ${theme.bglPalette.data_colors.pastEventTable_border}`\n\n}))\n\nconst BglTableRow = styled(TableRow)(({theme}) => ({\n\n  '&:nth-of-type(odd)': {\n    backgroundColor: theme.bglPalette.data_colors.pastEventTableOddRow,\n  },\n  '&:nth-last-of-type(1)': {\n    borderBottom: `1px solid ${theme.bglPalette.data_colors.pastEventTable_border}`\n  }\n}))\n\nexport const PastEventsContainer = () => {\n\n  const { rc } = useGlobalConfig()\n\n  const { translations , config } = rc;\n  const pilotTimeZone = config.getConfig('EVENT_MANAGEMENT.PILOT_TIMEZONE') || Intl.DateTimeFormat().resolvedOptions().timeZone;\n  //Get time difference between pilot and local timezone.\n  const timeDiff = rc.dateUtils.getTimeDifference( Intl.DateTimeFormat().resolvedOptions().timeZone,pilotTimeZone) as number;\n\n  const [eventType, setEventType] = useState<ScheduledEvent.EventType>(ScheduledEvent.EventType.ALL)\n  const [date, setDate] = useState<Date>(new Date()) \n  const [page, setPage] = useState(0)\n  const [rowsPerPage, setRowsPerPage] = useState(10)\n  let   [reload, setReload] = useState(0)\n  const [openEventDetails, setOpenEventDetails] = useState(false)\n  const [dialogEventDetails, setDialogEventDetails] = useState<ScheduledEvent>()\n  const [openSE, setOpenSE] = useState(false)\n\n  const params : GetEventsAPI.params = {\n    pilotId : rc.session.getPilotId(),\n    date : rc.dateUtils.formatDate(date, 'MM-yyyy'),\n    eventType, \n    eventStatus : ScheduledEvent.EventStatus.COMPLETED,\n    timezoneOffsetMins : rc.dateUtils.getTimezoneOffset()\n  }\n\n  const {\n    data, \n    error, \n    isLoading\n  } = useRequestApiData<GetEventsAPI.retval>(EventManagementAPI.fetchEvents, rc, params, [reload])\n  \n  const handleEventTypeChange = (event : SelectChangeEvent<ScheduledEvent.EventType>) => {\n    const value = event.target.value as ScheduledEvent.EventType\n    setEventType(value)\n  }\n\n  const handleDateChange = (event : any, keyboardValue ?: any) => {\n    try {\n      if (event === null || !rc.dateUtils.isValidDate(event) ||\n          event.getTime() > Date.now() ||\n         (keyboardValue && keyboardValue.length < 8)) return\n      setDate(event)\n    } catch (error) {}\n  }\n  \n  const handleChangePage = (event: React.MouseEvent<HTMLButtonElement> | null, newPage: number) => {\n    setPage(newPage)\n  }\n\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setRowsPerPage(parseInt(event.target.value, 10))\n    setPage(0)\n  }\n\n  const openDetails = (scheduledEvent : ScheduledEvent) => {\n    setDialogEventDetails(scheduledEvent)\n    setOpenEventDetails(true)\n  }\n\n  const handleEventDetailsDialogClose = () => {\n    setOpenEventDetails(false)\n  }\n\n  const createDuplicateEvent = () => {\n    rc.analytics.trackEvent('DUPLICATE_EVENT_CLICKED', {\n      eventName : dialogEventDetails?.eventName,\n      eventId : dialogEventDetails?.eventId\n    });\n    setOpenEventDetails(false)\n    setOpenSE(true)\n  }\n\n  const handleSEClose = (event : any, reason ?: string) => {\n\n    if (reason && reason === 'backdropClick') return\n    setOpenSE(false)\n  }\n\n  const emptyRows = page > 0 ? Math.max(0, (1 + page) * rowsPerPage - (data?.length || 0)) : 0\n  const theme = useTheme();\n\n  return (\n    <>\n      <div className={styles.filterCont}>\n        <EventTypeFilter \n          eventType={eventType}\n          handleEventTypeChange={handleEventTypeChange}/>\n\n        <LocalizationProvider\n          dateAdapter={AdapterDateFns}>\n          <BglDatePicker \n            inputFormat='MMM yyyy'\n            views={['year', 'month']}\n            openTo='month'\n            disableFuture\n            maxDate={new Date()}\n            value={date} \n            onChange={handleDateChange}\n            renderInput={(params : any) => <TextField {...params}/>}/>\n        </LocalizationProvider>\n\n      </div>\n\n      <div className={styles.disclaimerCont} \n      style={{backgroundColor : `${theme.bglPalette.data_colors.eventCardCommunication_bg}`}}>\n        <Typography variant='bglCaption1' >\n          {translations.getTranslation(EVENT_MANAGEMENT_STRINGS.PAST.DESCRIPTION)}\n        </Typography>\n      </div>\n\n      <div className={styles.eventsCont}>\n      {\n        isLoading ? \n        <BglLoading\n          className={styles.loadingCont} /> :\n\n        (error || data?.length === 0) ?  \n        <EventsDataError \n          noData={data?.length === 0}\n          title={\n            error\n              ? translations.getTranslation(\n                  EVENT_MANAGEMENT_STRINGS.ERROR.TITLE\n                )\n              : translations.getTranslation(\n                  EVENT_MANAGEMENT_STRINGS.NO_DATA.PAST_EVENTS.TITLE\n                )\n          }\n          subTitle={\n            error\n              ? translations.getTranslation(\n                  EVENT_MANAGEMENT_STRINGS.ERROR.SUBTEXT\n                )\n              : translations.getTranslation(\n                  EVENT_MANAGEMENT_STRINGS.NO_DATA.PAST_EVENTS.SUBTEXT\n                )\n          }\n          cta={\n            error\n              ? {\n                  title: translations.getTranslation(\n                    EVENT_MANAGEMENT_STRINGS.ERROR.RELOAD\n                  ),\n                  callback: () => setReload(++reload),\n                }\n              : undefined\n          }/> :\n\n        <TableContainer>\n          <BglTable>\n            <TableHead>\n              <TableRow>\n                <BglHeaderCell>\n                  <Typography variant=\"bglCaption2\">\n                    {translations.getTranslation(EVENT_MANAGEMENT_STRINGS.PAST.FIELDS.NAME)}\n                  </Typography>\n                </BglHeaderCell>\n                <BglHeaderCell>\n                  <Typography variant=\"bglCaption2\">\n                    {translations.getTranslation(EVENT_MANAGEMENT_STRINGS.DATE.START)}\n                  </Typography>\n                </BglHeaderCell>\n                <BglHeaderCell>\n                  <Typography variant=\"bglCaption2\">\n                   {translations.getTranslation(EVENT_MANAGEMENT_STRINGS.DATE.END)}\n                  </Typography>\n                </BglHeaderCell>\n                <BglHeaderCell>\n                  <Typography variant=\"bglCaption2\">\n                    {translations.getTranslation(EVENT_MANAGEMENT_STRINGS.PAST.FIELDS.CREATED_ON)}\n                  </Typography>\n                </BglHeaderCell>\n                <BglHeaderCell>\n                  <Typography variant=\"bglCaption2\">\n                    {translations.getTranslation(EVENT_MANAGEMENT_STRINGS.PAST.FIELDS.ACTION)}\n                  </Typography>\n                </BglHeaderCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n            {(\n              <>\n              {(rowsPerPage > 0\n                ? data!.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                : data!).map((scheduledEvent, index) => (\n                  <BglTableRow key={index}>\n                    <BglRowCell>\n                      <Button \n                        onClick={() => openDetails(scheduledEvent)}\n                        sx={{ padding: 0, minWidth: 0, textTransform: 'none' }} \n                        variant='text'>\n                          <Typography variant=\"bglBody2\">\n                            {scheduledEvent.eventName}\n                          </Typography>\n                      </Button>\n                    </BglRowCell>\n                    <BglRowCell>\n                      <Typography variant=\"bglBody2\">\n                        {rc.dateUtils.formatDate(rc.dateUtils.addMinutesToDate(new Date(scheduledEvent.startTimeEpoch * 1000),timeDiff), 'MMM dd, yyyy hh:mm a')}\n                      </Typography>\n                    </BglRowCell>\n                    <BglRowCell>\n                      <Typography variant=\"bglBody2\">\n                        {rc.dateUtils.formatDate(rc.dateUtils.addMinutesToDate(new Date(scheduledEvent.endTimeEpoch * 1000),timeDiff), 'MMM dd, yyyy hh:mm a')}\n                      </Typography>\n                    </BglRowCell>\n                    <BglRowCell>\n                      <Typography variant=\"bglBody2\">\n                        {rc.dateUtils.formatDate(rc.dateUtils.addMinutesToDate(new Date(scheduledEvent.creationTimeEpoch * 1000),timeDiff), 'MMM dd, yyyy hh:mm a')}\n                      </Typography>\n                    </BglRowCell>\n                    <BglRowCell>\n                      <Button \n                        onClick={() => openDetails(scheduledEvent)}\n                        sx={{ padding: 0, minWidth: 0, textTransform: 'none' }} \n                        variant='text'>\n                          <Typography variant='bglBody4' sx={{textDecoration : \"underline\"}}>\n                            {translations.getTranslation(EVENT_MANAGEMENT_STRINGS.PAST.DETAILS)}\n                          </Typography>\n                      </Button>\n                    </BglRowCell>\n                  </BglTableRow>\n                ))}\n              {emptyRows > 0 && (\n                <TableRow style={{ height: 53 * emptyRows }}>\n                  <TableCell colSpan={6} />\n                </TableRow>\n              )}  \n              </>\n            )}      \n            </TableBody>\n            <TableFooter>\n              <TableRow>\n                <TablePagination\n                  colSpan={6}\n                  count={data!.length}\n                  rowsPerPage={rowsPerPage}\n                  page={page}\n                  SelectProps={{\n                    inputProps: {\n                      'aria-label': 'rows per page',\n                    },\n                    native: true,\n                  }}\n                  onPageChange={handleChangePage}\n                  onRowsPerPageChange={handleChangeRowsPerPage}\n                  ActionsComponent={TablePaginationActions}/>\n              </TableRow>\n            </TableFooter>\n          </BglTable>\n        </TableContainer>\n      }\n      </div>\n      { openEventDetails ? \n        <EventDetailsDialog\n          scheduledEvent={dialogEventDetails!}\n          open={openEventDetails}\n          onDuplicateCb={createDuplicateEvent}\n          handleClose={handleEventDetailsDialogClose}/> : <></>\n      }\n       { openSE ? \n        <EventEditDialog\n          mode={MODE.ADD}\n          open={openSE}\n          startDate={rc.dateUtils.addDays(dialogEventDetails!.startTimeEpoch * 1000, \n            rc.dateUtils.getDayDiff(dialogEventDetails!.startTimeEpoch * 1000, Date.now()) + 1)\n          }\n          endDate={rc.dateUtils.addDays(dialogEventDetails!.endTimeEpoch * 1000, \n              rc.dateUtils.getDayDiff(dialogEventDetails!.endTimeEpoch * 1000, Date.now()) + 1)\n          }\n          eventType={dialogEventDetails!.eventType}\n          handleClose={handleSEClose}/> : <></>\n      }\n    </>\n  )\n}","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"EventManagementDashboard_root__bD1lz\"};","import { Tab,\n         Tabs,\n         Typography,\n       }                          from '@mui/material'\nimport { useGlobalConfig } from 'context/GlobalContext'\nimport { useState }               from 'react'\nimport { EVENT_MANAGEMENT_STRINGS } from 'types/translations/EventManagementStrings'\nimport { ActiveEventsContainer }  from '../../activeEventsContainer/ActiveEventsContainer'\nimport { PastEventsContainer }    from '../../pastEventsContainer/PastEventsContainer'\nimport styles                     from './EventManagementDashboard.module.scss'\n\nexport const EventManagementDashboard = () => {\n\n  const { rc } = useGlobalConfig();\n  const [tab, selectTab] = useState(0)\n\n  const { translations } = rc;\n  // Do not load past events unless the user visits the page \n  const [pastEventsLoaded, setPastEventsLoaded] = useState(false)\n  \n  const onTabChange = (value : number) => {\n    selectTab(value)\n    if (tab === 1 && !pastEventsLoaded) setPastEventsLoaded(true)\n  }\n\n  return (\n    <div className={styles.root}>\n\n      <Tabs value={tab} onChange={(event, value) => onTabChange(value)}>\n        <Tab label={\n          <Typography variant='bglBody2'>\n            {translations.getTranslation(EVENT_MANAGEMENT_STRINGS.TAB_LABELS.ACTIVE)}\n          </Typography>\n          }></Tab>\n        <Tab label={\n          <Typography  variant='bglBody2'>\n            {translations.getTranslation(EVENT_MANAGEMENT_STRINGS.TAB_LABELS.PAST)}\n          </Typography>\n        }></Tab>\n      </Tabs>\n\n      <div hidden={tab !== 0}>\n        <ActiveEventsContainer/>\n      </div>\n      {\n        tab === 1 || pastEventsLoaded ?  \n        <div style={{ display: tab !== 1 ? 'none' : 'block' }} hidden={tab !== 1}>\n          <PastEventsContainer/>\n        </div>: <></>\n      }\n     \n      <div style={{ height: '1px' }}></div>\n\n    </div>\n  )\n}","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"UserManagement_root__X07kk\",\"userLoadTitle\":\"UserManagement_userLoadTitle__WF28Q\",\"userLoadCardsContainer\":\"UserManagement_userLoadCardsContainer__brB2Y\",\"userLoadCard\":\"UserManagement_userLoadCard__W4gpp\",\"loadingCont\":\"UserManagement_loadingCont__Wwr0U\"};","export const USER_CONFIG_TAG = \"USER_MANAGEMENT\";\n\nexport const USER_MANAGEMENT_STRINGS: any = {\n  TITLE: `${USER_CONFIG_TAG}.USER_LOAD.TITLE`,\n  LAST_SYNC: `${USER_CONFIG_TAG}.USER_LOAD.LAST_SYNC`\n};\n\n","import * as React from \"react\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport Typography from \"@mui/material/Typography\";\nimport { styled } from \"@mui/material\";\nimport { useGlobalConfig } from \"context/GlobalContext\";\nimport { USER_CONFIG_TAG } from \"types/translations/UserManagementStrings\";\nimport WarningRoundedIcon from '@mui/icons-material/WarningRounded';\n\nconst BglUserCard = styled(Card)(({ theme }) => ({\n  backgroundColor: theme.bglPalette.primary[200],\n  height: 140,\n}));\n\nexport interface UserManagementCardProps {\n  title: String;\n  count: Number;\n  tooltipMsg: String;\n}\n\nexport default function UserManagementCard(props: UserManagementCardProps) {\n  const { rc } = useGlobalConfig();\n\n  const { translations } = rc;\n\n  const title = translations.getTranslation(\n    `${USER_CONFIG_TAG}.USER_LOAD.${props.title.toUpperCase()}.TITLE`\n  );\n\n  const infoMsg = translations.getTranslation(\n    `${USER_CONFIG_TAG}.USER_LOAD.${props.tooltipMsg.toUpperCase()}.INFO`\n  );\n\n  return (\n    <BglUserCard>\n      <CardContent>\n        <div>\n          <Typography\n            variant=\"bglSubtitle2\"\n            sx={{ lineHeight: \"24px\", fontWeight: 600 }}\n          >\n            {title}\n          </Typography>\n        </div>\n        <div style={{marginTop: 5}}>\n          <Typography variant=\"bglTitle2\">\n            {props.count?.toLocaleString()}\n          </Typography>\n        </div>\n        {infoMsg && <div style={{display:'flex',alignItems:'center',gap:5,marginTop:5}}>\n          <WarningRoundedIcon sx={{ color: \"#186CDD\", fontSize: 20 }} /> {infoMsg}\n        </div>}\n      </CardContent>\n    </BglUserCard>\n  );\n}\n","import {\n  IconButton,\n  Theme,\n  Typography,\n  useTheme,\n} from \"@mui/material\";\nimport { useGlobalConfig } from \"context/GlobalContext\";\nimport { useEffect, useState } from \"react\";\nimport styles from \"./UserManagement.module.scss\";\nimport UserManagementCard, { UserManagementCardProps } from \"./UserManagementCard\";\nimport RefreshIcon from \"@mui/icons-material/Refresh\";\nimport { useRequestApiData } from \"hooks\";\nimport { BglLoading } from \"components/loading/BglLoading\";\nimport { GetUserLoadAPI } from \"types/userManagement/userManagementInterface\";\nimport { UserManagementAPI } from \"apis/userManagementAPI\";\nimport { USER_MANAGEMENT_STRINGS } from \"types/translations/UserManagementStrings\";\nimport { ScheduledEvent } from \"types/eventManagement/EventManagementInterface\";\nimport { formatOngageUserCountData } from \"helpers/helper\";\n\nexport const UserManagement = () => {\n  const { rc } = useGlobalConfig();\n  const { translations } = rc;\n  const theme: Theme = useTheme();\n\n  const keysToConsider = [\"activeUsers\", \"unsubscribed\"];\n  const [formattedData, setFormattedData] = useState<any>(undefined);\n\n  let [lastSyncTime, setLastSyncTime] = useState<string>(\"\");\n\n  let [reload, setReload] = useState(0);\n\n  const params: GetUserLoadAPI.params = {\n    pilotId: rc.session.getPilotId(),\n    campaignType : ScheduledEvent.EventType.CPP \n  };\n\n  const { data, error, isLoading } = useRequestApiData<GetUserLoadAPI.retval | any>(UserManagementAPI.fetchUserLoad, rc, params, [reload]);\n\n  useEffect(() => {\n    if (data) {\n      setLastSyncTime(new Date().toLocaleString(\"en-US\", { hour: '2-digit', minute: '2-digit', hour12: true }) + \", \" + new Date().toLocaleDateString(\"en-GB\"));\n      setFormattedData(formatOngageUserCountData(data));\n    }\n  }, [data]);\n\n  return (\n    <>\n      {<div className={styles.root}>\n      <div className={styles.userLoadTitle}>\n          <Typography\n            variant=\"bglSubtitle4\"\n            sx={{ fontWeight: 600 }}\n            color={theme.bglPalette.foreground[500]}\n          >\n            {translations.getTranslation(USER_MANAGEMENT_STRINGS.TITLE)}\n          </Typography>\n\n          {data && (!isLoading) && (\n            <span style={{ display: \"flex\", alignItems: \"center\" }}>\n              <Typography\n                variant=\"bglBody2\"\n                sx={{ height: 20 }}\n                color={theme.bglPalette.foreground[400]}\n              >\n                {translations.getTranslation(USER_MANAGEMENT_STRINGS.LAST_SYNC)}{\" \"}\n                {lastSyncTime}\n              </Typography>\n              &nbsp;\n              <IconButton\n                aria-label=\"refresh\"\n                onClick={() => setReload(++reload)}\n              >\n                <RefreshIcon sx={{ fontSize: 20 }} />\n              </IconButton>\n            </span>\n          )}\n        </div>\n        {isLoading ? (\n          <BglLoading className={styles.loadingCont} />\n        ) : (\n          <div className={styles.userLoadCardsContainer}>\n            {formattedData && keysToConsider.map((key: string) => {\n              const props: UserManagementCardProps = {\n                title: key,\n                count: formattedData[key],\n                tooltipMsg: key,\n              };\n              return (\n                <div key={key} className={styles.userLoadCard}>\n                  {\" \"}\n                  <UserManagementCard {...props} />{\" \"}\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </div>}\n    </>\n  );\n};\n  ","import { useGlobalConfig } from \"context/GlobalContext\";\nimport { EVLoadManagement } from \"./EVLoadManagement/EVLoadManagement\";\nimport { EventManagementDashboard } from \"./EventsManagement/EventManagementDashboard\";\nimport { UserManagement } from \"./UserManagement/UserManagement\";\n\nexport const EventManagementDashboardContainer = () => {\n  const { rc } = useGlobalConfig();\n  const { config } = rc;\n  const realTimeEVDashboardSupported = JSON.parse(config.getConfig(\"EVENT_MANAGEMENT.EV.REALTIME_DASHBOARD\"));\n  const userManagementDashboardSupported = JSON.parse(config.getConfig(\"EVENT_MANAGEMENT.USERMANAGEMENT_DASHBOARD\"))\n  \n  return (\n    <>\n      {realTimeEVDashboardSupported && <EVLoadManagement />}\n      { userManagementDashboardSupported && <UserManagement />}\n      <EventManagementDashboard />\n    </>\n  );\n};\n","import { Navigate, Route, Routes } from \"react-router-dom\";\nimport { EventManagementDashboardContainer } from \"./dashboard/EventManagementDashboardContainer\";\n\n\nexport const EventManagementRoutes = () => {\n  \n\n  return (\n    <Routes>\n      <Route path=\"\" element={<Navigate to=\"dashboard\" replace />} />\n      <Route path=\"dashboard\" element={<EventManagementDashboardContainer />} />\n    </Routes>\n  )\n};\n"],"names":["CountDownTimer","rc","onTickCb","timeRemaining","till","this","Date","getTime","complete","start","onTick","intervalId","setInterval","clearInterval","dateUtils","getDurationObject","EventDeleteDialog","styled","TextField","theme","color","WebkitTextFillColor","props","useGlobalConfig","translations","useState","loading","data","error","setApiState","handleDelete","params","pilotId","session","getPilotId","eventId","scheduledEvent","campaignType","eventType","analytics","trackEvent","EventManagementAPI","resp","setTimeout","events","broadcast","EVENTS","onClose","handleClose","open","title","getTranslation","EVENT_MANAGEMENT_STRINGS","DialogContent","EventCard","mode","DISPLAY_MODE","DIALOG","className","styles","CircularProgress","size","sx","marginRight","Typography","marginBottom","message","minWidth","onClick","type","CheckCircleOutline","BglAccordian","Accordion","background","bglPalette","data_colors","eventCardCommunication_bg","padding","margin","marginTop","display","BglHeaderCell","TableCell","border","BglTableCell","paddingTop","whiteSpace","wordWrap","CARD","React","moreAnchorEl","setMoreAnchorEl","openSE","setOpenSE","seProps","setSEProps","openDE","setOpenDE","countDownTime","setCountDownTime","isMenuOpen","Boolean","pilotTimeZone","config","getConfig","Intl","DateTimeFormat","resolvedOptions","timeZone","timeDiff","getTimeDifference","alertList","isEventTypeEV","communications","canEdit","length","dateEpoch","canDelete","eventStatus","ScheduledEvent","useEffect","toTime","endTimeEpoch","startTimeEpoch","value","durStr","init","useTheme","menuId","renderMenu","Menu","marginLeft","anchorEl","anchorOrigin","vertical","horizontal","MenuListProps","style","id","keepMounted","transformOrigin","MenuItem","IconButton","Create","variant","paddingRight","sd","ed","eInFuture","getTimeOfDayMillis","MODE","startDate","getSameTimeForFutureDay","endDate","eventName","Queue","Delete","Card","noWrap","component","event","currentTarget","pastEventTable_border","borderRight","palette","text","secondary","formatDate","addMinutesToDate","Alarm","defaultExpanded","disableGutters","elevation","AccordionSummary","expandIcon","Email","height","AccordionDetails","TableContainer","Table","TableHead","TableRow","TableBody","map","alert","index","alertType","backgroundColor","status","toLowerCase","primary","contrastText","EventEditDialog","reason","EventsDataError","noData","src","NoDataImg","alt","CancelOutlined","subTitle","cta","callback","width","BglAccordianDetails","minHeight","alignItems","justifyContent","EventsContainer","reload","setReload","expanded","setExpanded","manualExpanded","setManualExpanded","timezoneOffsetMins","getTimezoneOffset","subscribe","useRequestApiData","isLoading","onChange","expandAccordian","ExpandMore","typography","md","xs","TITLE","BglLoading","undefined","Grid","container","spacing","columns","sm","item","EventTypeFilter","supportedEvents","JSON","parse","FormControl","Select","inputProps","handleEventTypeChange","borderRadius","startAdornment","InputAdornment","position","ActiveEventsContainer","setEventType","target","TablePaginationActions","count","page","rowsPerPage","onPageChange","Box","flexShrink","ml","disabled","FirstPage","KeyboardArrowLeft","Math","ceil","KeyboardArrowRight","max","LastPage","EventDetailsDialog","DialogActions","onDuplicateCb","BglDatePicker","DatePicker","breakpoints","down","main","BglTable","fontWeight","BglRowCell","BglTableRow","pastEventTableOddRow","borderBottom","PastEventsContainer","date","setDate","setPage","setRowsPerPage","openEventDetails","setOpenEventDetails","dialogEventDetails","setDialogEventDetails","openDetails","emptyRows","LocalizationProvider","dateAdapter","AdapterDateFns","inputFormat","views","openTo","disableFuture","maxDate","keyboardValue","isValidDate","now","renderInput","slice","Button","textTransform","creationTimeEpoch","textDecoration","colSpan","TableFooter","TablePagination","SelectProps","native","newPage","onRowsPerPageChange","parseInt","ActionsComponent","addDays","getDayDiff","EventManagementDashboard","tab","selectTab","pastEventsLoaded","setPastEventsLoaded","Tabs","onTabChange","Tab","label","hidden","USER_CONFIG_TAG","USER_MANAGEMENT_STRINGS","LAST_SYNC","BglUserCard","UserManagementCard","toUpperCase","infoMsg","tooltipMsg","CardContent","lineHeight","toLocaleString","gap","WarningRounded","fontSize","UserManagement","formattedData","setFormattedData","lastSyncTime","setLastSyncTime","UserManagementAPI","hour","minute","hour12","toLocaleDateString","formatOngageUserCountData","foreground","Refresh","key","EventManagementDashboardContainer","realTimeEVDashboardSupported","userManagementDashboardSupported","EVLoadManagement","EventManagementRoutes","path","element","to","replace"],"sourceRoot":""}